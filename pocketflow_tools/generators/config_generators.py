from __future__ import annotations

from typing import Any, Dict


def generate_dependency_files(spec) -> Dict[str, str]:
    """Mirror legacy _generate_dependency_files output mapping.

    Returns a dict of file path -> file content for dependency/config files.
    """
    # Defer to basic implementations used in legacy fallback; pattern-specific
    # orchestration is handled upstream in the legacy path when available.
    files: Dict[str, str] = {}
    files["pyproject.toml"] = generate_basic_pyproject(spec)
    files["requirements.txt"] = "\n".join([
        "pocketflow",
        "pydantic>=2.0",
        "fastapi>=0.104.0",
        "uvicorn[standard]>=0.24.0",
        "",
    ])
    files["requirements-dev.txt"] = "\n".join([
        "pytest>=7.0.0",
        "pytest-asyncio>=0.21.0",
        "ruff>=0.1.0",
        "ty>=0.5.0",
        "",
    ])
    files[".gitignore"] = DEFAULT_GITIGNORE
    files["README.md"] = generate_readme(spec, config={"python_version": "3.12"})
    return files


def generate_basic_dependency_config(pattern: str) -> Any:
    """Return a minimal dependency config matching legacy fallback shape."""
    return {
        "base_dependencies": ["pocketflow", "pydantic", "fastapi"],
        "pattern_dependencies": {
            "RAG": ["chromadb", "sentence-transformers"],
            "AGENT": ["openai", "anthropic"],
            "TOOL": ["requests", "aiohttp"],
            "WORKFLOW": [],
            "MAPREDUCE": ["celery", "redis"],
            "MULTI-AGENT": ["openai", "anthropic"],
            "STRUCTURED-OUTPUT": ["jsonschema"],
        }.get(pattern, []),
        "dev_dependencies": ["pytest", "pytest-asyncio", "ruff", "mypy"],
        "tool_configs": {
            "ruff": {"line-length": 88, "target-version": "py312"},
            "mypy": {"python_version": "3.12", "strict": True},
        },
    }


def generate_basic_pyproject(spec) -> str:
    project_name = spec.name.lower().replace(" ", "-")
    return f'''[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{project_name}"
version = "0.1.0"
description = "{spec.description}"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "pocketflow",
    "pydantic>=2.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.1.0",
    "ty>=0.5.0",
]

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
'''


def generate_readme(spec, config: Any) -> str:
    """Generate README matching legacy content and structure."""
    project_name = spec.name.lower().replace(" ", "-")
    return f'''# {spec.name}

{spec.description}

## Overview

This is a PocketFlow {spec.pattern} pattern implementation generated by Agent OS + PocketFlow Framework.

## Setup

### Prerequisites

- Python {config["python_version"]}
- UV package manager (recommended) or pip

### Installation with UV (Recommended)

```bash
# Install dependencies
uv sync

# Activate virtual environment
uv shell

# Install development dependencies
uv sync --dev
```

### Installation with pip

```bash
# Create virtual environment
python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate

# Install dependencies
pip install -r requirements.txt

# Install development dependencies
pip install -r requirements-dev.txt
```

## Development

### Running Tests

```bash
# With UV
uv run pytest

# With pip
pytest
```

### Code Quality

```bash
# Linting and formatting
uv run ruff check --fix .
uv run ruff format .

# Type checking
uv run ty check
```

### Running the Application

```bash
# Development server (FastAPI enabled for all workflows)
uv run uvicorn main:app --reload

# Or run the flow directly
uv run python -c "from flow import {spec.name}Flow; import asyncio; flow = {spec.name}Flow(); asyncio.run(flow.run_async({{}}))"
```

## Architecture

### Pattern: {spec.pattern}

This workflow implements the {spec.pattern} pattern with the following components:

#### Nodes
{chr(10).join(f'- **{node["name"]}**: {node["description"]}' for node in spec.nodes)}

#### Utilities
{chr(10).join(f'- **{util["name"]}**: {util["description"]}' for util in spec.utilities)}

### FastAPI Integration

✅ Enabled - API endpoints available at `/api/v1/`

## Project Structure

```
{project_name}/
├── pyproject.toml          # Project configuration and dependencies
├── requirements.txt        # Runtime dependencies
├── requirements-dev.txt    # Development dependencies
├── README.md              # This file
├── .gitignore             # Git ignore rules
├── docs/
│   └── design.md          # Detailed design document
├── schemas/
│   └── models.py          # Pydantic models
├── utils/                 # Utility functions
├── nodes.py               # PocketFlow nodes
├── flow.py                # Main workflow
├── tests/                 # Test files
├── main.py               # FastAPI application
└── router.py             # API routes
```

## Next Steps

1. **Review Design**: Check `docs/design.md` for complete specifications
2. **Implement Utilities**: Complete functions in `utils/` directory
3. **Implement Nodes**: Complete business logic in `nodes.py`
4. **Test**: Run tests and ensure all pass
5. **Deploy**: Follow your deployment process

## Generated Files

This project was generated by Agent OS + PocketFlow Framework. Key files to customize:

- **`utils/*.py`**: Implement your utility functions
- **`nodes.py`**: Complete node implementations
- **`docs/design.md`**: Review and complete design specifications

## Support

For questions about PocketFlow patterns and implementation:
- Check the design document: `docs/design.md`
- Review PocketFlow documentation
- Check Agent OS documentation

Generated on: TODO-SET-DATE
'''


DEFAULT_GITIGNORE = '''# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
Pipfile.lock

# poetry
poetry.lock

# pdm
.pdm.toml

# PEP 582
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
.idea/

# VS Code
.vscode/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific
*.log
temp/
tmp/
'''
