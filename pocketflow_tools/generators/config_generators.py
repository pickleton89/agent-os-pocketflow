from __future__ import annotations

import sys
from pathlib import Path
from typing import Any, Dict

# Import dependency orchestrator for pattern-specific dependency generation
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "framework-tools"))
from dependency_orchestrator import DependencyOrchestrator


def generate_dependency_files(spec) -> Dict[str, str]:
    """Generate dependency configuration files using pattern-aware orchestration.

    Returns a dict of file path -> file content for dependency/config files.
    Uses the DependencyOrchestrator to generate pattern-specific dependencies.
    """
    files: Dict[str, str] = {}

    # Initialize orchestrator for pattern-specific dependency generation
    orchestrator = DependencyOrchestrator()

    # Get pattern from spec (default to WORKFLOW if not specified)
    pattern = getattr(spec, 'pattern', 'WORKFLOW')

    # Generate dependency configuration for the pattern
    config = orchestrator.generate_config_for_pattern(pattern)

    # Generate pyproject.toml using orchestrator
    project_name = getattr(spec, 'name', 'workflow').lower().replace(' ', '-')
    description = getattr(spec, 'description', f'{pattern} pattern workflow')
    files["pyproject.toml"] = orchestrator.generate_pyproject_toml(
        project_name=project_name,
        pattern=pattern,
        description=description
    )

    # Generate requirements.txt with pattern-specific dependencies
    all_runtime_deps = sorted(set(config.base_dependencies + config.pattern_dependencies))
    files["requirements.txt"] = "\n".join(all_runtime_deps + [""])

    # Generate requirements-dev.txt with development dependencies
    files["requirements-dev.txt"] = "\n".join(sorted(config.dev_dependencies) + [""])

    # Generate UV-specific configuration files
    uv_config_files = orchestrator.generate_uv_config(project_name, pattern)
    files.update(uv_config_files)

    # Generate .gitignore
    files[".gitignore"] = DEFAULT_GITIGNORE

    # Generate README with enhanced configuration information
    readme_config = {
        "python_version": config.python_version.replace(">=", "").replace(",<4.0", ""),
        "pattern": pattern,
        "has_pattern_deps": len(config.pattern_dependencies) > 0,
    }
    files["README.md"] = generate_readme(spec, config=readme_config)

    return files


def generate_basic_pyproject(spec) -> str:
    """Generate pyproject.toml using dependency orchestrator.

    This function maintains backward compatibility while using the orchestrator
    for pattern-specific dependency generation.
    """
    orchestrator = DependencyOrchestrator()

    project_name = getattr(spec, 'name', 'workflow').lower().replace(" ", "-")
    pattern = getattr(spec, 'pattern', 'WORKFLOW')
    description = getattr(spec, 'description', f'{pattern} pattern workflow')

    return orchestrator.generate_pyproject_toml(
        project_name=project_name,
        pattern=pattern,
        description=description
    )


def generate_readme(spec, config: Any) -> str:
    """Generate README matching legacy content and structure with pattern-aware details."""
    project_name = getattr(spec, 'name', 'workflow').lower().replace(" ", "-")
    spec_name = getattr(spec, 'name', 'Workflow')
    spec_description = getattr(spec, 'description', 'PocketFlow workflow')
    pattern = getattr(spec, 'pattern', 'WORKFLOW')

    # Handle both old dict config and new enhanced config
    if isinstance(config, dict):
        python_version = config.get("python_version", "3.12")
        has_pattern_deps = config.get("has_pattern_deps", False)
    else:
        python_version = "3.12"
        has_pattern_deps = False

    return f'''# {spec_name}

{spec_description}

## Overview

This is a PocketFlow {pattern} pattern implementation generated by Agent OS + PocketFlow Framework.

## Setup

### Prerequisites

- Python {python_version}
- UV package manager (recommended) or pip

### Installation with UV (Recommended)

```bash
# Install dependencies
uv sync

# Activate virtual environment
uv shell

# Install development dependencies
uv sync --dev
```

### Installation with pip

```bash
# Create virtual environment
python -m venv .venv
source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate

# Install dependencies
pip install -r requirements.txt

# Install development dependencies
pip install -r requirements-dev.txt
```

## Development

### Running Tests

```bash
# With UV
uv run pytest

# With pip
pytest
```

### Code Quality

```bash
# Linting and formatting
uv run ruff check --fix .
uv run ruff format .

# Type checking
uv run ty check
```

### Running the Application

```bash
# Development server (FastAPI enabled for all workflows)
uv run uvicorn main:app --reload

# Or run the flow directly
uv run python -c "from flow import {spec_name}Flow; import asyncio; flow = {spec_name}Flow(); asyncio.run(flow.run_async({{}}))"
```

## Architecture

### Pattern: {pattern}

This workflow implements the {pattern} pattern with the following components:

#### Nodes
{chr(10).join(f'- **{node["name"]}**: {node["description"]}' for node in getattr(spec, 'nodes', []))}

#### Utilities
{chr(10).join(f'- **{util["name"]}**: {util["description"]}' for util in getattr(spec, 'utilities', []))}

### FastAPI Integration

✅ Enabled - API endpoints available at `/api/v1/`

## Project Structure

```
{project_name}/
├── pyproject.toml          # Project configuration and dependencies
├── requirements.txt        # Runtime dependencies
├── requirements-dev.txt    # Development dependencies
├── README.md              # This file
├── .gitignore             # Git ignore rules
├── docs/
│   └── design.md          # Detailed design document
├── schemas/
│   └── models.py          # Pydantic models
├── utils/                 # Utility functions
├── nodes.py               # PocketFlow nodes
├── flow.py                # Main workflow
├── tests/                 # Test files
├── main.py               # FastAPI application
└── router.py             # API routes
```

## Next Steps

1. **Review Design**: Check `docs/design.md` for complete specifications
2. **Implement Utilities**: Complete functions in `utils/` directory
3. **Implement Nodes**: Complete business logic in `nodes.py`
4. **Test**: Run tests and ensure all pass
5. **Deploy**: Follow your deployment process

## Generated Files

This project was generated by Agent OS + PocketFlow Framework. Key files to customize:

- **`utils/*.py`**: Implement your utility functions
- **`nodes.py`**: Complete node implementations
- **`docs/design.md`**: Review and complete design specifications

## Support

For questions about PocketFlow patterns and implementation:
- Check the design document: `docs/design.md`
- Review PocketFlow documentation
- Check Agent OS documentation

Generated on: TODO-SET-DATE
'''


DEFAULT_GITIGNORE = '''# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv - Note: .python-version is generated by this framework and should be committed
# DO NOT add .python-version to .gitignore - it ensures team uses correct Python version

# pipenv
Pipfile.lock

# poetry
poetry.lock

# pdm
.pdm.toml

# PEP 582
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
.idea/

# VS Code
.vscode/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific
*.log
temp/
tmp/
'''
