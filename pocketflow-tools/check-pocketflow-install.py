#!/usr/bin/env python3
"""
PocketFlow Installation Checker

This script checks if a target project has the necessary dependencies
to run PocketFlow workflows generated by Agent OS + PocketFlow.

Usage:
    python check-pocketflow-install.py [--install]
    
Options:
    --install    Automatically install missing dependencies
"""

import sys
import subprocess
import importlib
import re
from pathlib import Path
from typing import Tuple, Dict

# Required dependencies for PocketFlow workflows
REQUIRED_PACKAGES = {
    "pocketflow": "Core PocketFlow framework",
    "fastapi": "FastAPI web framework (for API integration)", 
    "pydantic": "Data validation with Pydantic models",
    "uvicorn": "ASGI server for FastAPI",
    "pytest": "Testing framework",
    "pytest-asyncio": "Async testing support",
    "httpx": "HTTP client for testing",
}

OPTIONAL_PACKAGES = {
    "ruff": "Code linting and formatting",
    "ty": "Type checking", 
    "openai": "OpenAI API client",
    "anthropic": "Anthropic API client",
    "chromadb": "Vector database for RAG patterns",
    "numpy": "Numerical computing (for embeddings)",
}


def validate_package_name(package_name: str) -> bool:
    """Validate package name follows PyPI naming conventions for security."""
    # PyPI package names can only contain letters, numbers, periods, hyphens, and underscores
    # Must start and end with alphanumeric character
    pattern = r'^[a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])?$'
    
    # Additional security checks
    if not package_name or len(package_name) > 214:  # PyPI limit
        return False
    if package_name.lower() in ['..', '.', '__pycache__']:  # Dangerous names
        return False
    if package_name.startswith('-') or package_name.endswith('-'):  # Invalid format
        return False
        
    return bool(re.match(pattern, package_name))


def check_package(package_name: str) -> Tuple[bool, str]:
    """Check if a package is installed and get version."""
    try:
        module = importlib.import_module(package_name)
        version = getattr(module, "__version__", "unknown")
        return True, version
    except ImportError:
        return False, ""


def check_python_version() -> bool:
    """Check if Python version is compatible."""
    version = sys.version_info
    if version.major == 3 and version.minor >= 11:
        return True
    return False


def check_project_structure() -> Dict[str, bool]:
    """Check if current directory has PocketFlow project structure."""
    expected_files = [
        "pyproject.toml",
        "flow.py", 
        "nodes.py",
        "schemas/models.py",
    ]
    
    results = {}
    for file_path in expected_files:
        results[file_path] = Path(file_path).exists()
    
    return results


def install_package(package_name: str) -> bool:
    """Install a package using uv or pip."""
    # Validate package name for security
    if not validate_package_name(package_name):
        print(f"❌ Invalid package name '{package_name}' - security validation failed")
        return False
    
    # Try uv first (preferred), then pip
    for installer in ["uv", "pip"]:
        try:
            if installer == "uv":
                cmd = ["uv", "add", package_name]
            else:
                cmd = ["pip", "install", package_name]
                
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)  # 5 min timeout
            if result.returncode == 0:
                print(f"✅ Successfully installed {package_name} with {installer}")
                return True
            else:
                print(f"❌ Failed to install {package_name} with {installer}: {result.stderr}")
        except FileNotFoundError:
            continue  # Try next installer
        except subprocess.TimeoutExpired:
            print(f"❌ Installation of {package_name} timed out")
            return False
    
    print(f"❌ Could not install {package_name} - no suitable installer found")
    return False


def main():
    """Main installation check routine."""
    auto_install = "--install" in sys.argv
    
    print("🔍 Agent OS + PocketFlow Installation Checker")
    print("=" * 50)
    
    # Check Python version
    print("\n📋 Python Version Check:")
    if check_python_version():
        print(f"✅ Python {sys.version.split()[0]} (compatible)")
    else:
        print(f"❌ Python {sys.version.split()[0]} (requires Python 3.11+)")
        return 1
    
    # Check project structure
    print("\n📁 Project Structure Check:")
    structure = check_project_structure()
    for file_path, exists in structure.items():
        status = "✅" if exists else "⚠️"
        print(f"{status} {file_path}")
    
    if not structure["flow.py"] or not structure["nodes.py"]:
        print("\n💡 This doesn't appear to be a PocketFlow project.")
        print("   Run the Agent OS generator to create a PocketFlow workflow first.")
    
    # Check required packages
    print("\n📦 Required Dependencies:")
    missing_required = []
    for package, description in REQUIRED_PACKAGES.items():
        installed, version = check_package(package)
        if installed:
            print(f"✅ {package} ({version}) - {description}")
        else:
            print(f"❌ {package} - {description}")
            missing_required.append(package)
    
    # Check optional packages
    print("\n🔧 Optional Dependencies:")
    missing_optional = []
    for package, description in OPTIONAL_PACKAGES.items():
        installed, version = check_package(package)
        if installed:
            print(f"✅ {package} ({version}) - {description}")
        else:
            print(f"⚠️  {package} - {description}")
            missing_optional.append(package)
    
    # Auto-install if requested
    if auto_install and missing_required:
        print(f"\n🚀 Auto-installing {len(missing_required)} missing required packages...")
        install_failures = []
        install_successes = []
        
        for package in missing_required:
            if install_package(package):
                install_successes.append(package)
            else:
                install_failures.append(package)
        
        # Report installation results
        if install_successes:
            print(f"\n✅ Successfully installed: {', '.join(install_successes)}")
        if install_failures:
            print(f"\n❌ Failed to install: {', '.join(install_failures)}")
            print("   You may need to install these manually or check your internet connection.")
        
        # Update missing_required list for final summary
        missing_required = install_failures
    
    # Summary
    print("\n📊 Summary:")
    if not missing_required:
        print("✅ All required dependencies are installed!")
        print("🎉 Your project is ready to run PocketFlow workflows.")
    else:
        print(f"❌ Missing {len(missing_required)} required dependencies:")
        for package in missing_required:
            print(f"   - {package}")
        print("\n💡 To install missing dependencies:")
        print("   uv add " + " ".join(missing_required))
        print("   # OR")
        print("   pip install " + " ".join(missing_required))
        print("\n   Or run: python check-pocketflow-install.py --install")
    
    if missing_optional:
        print(f"\n💡 Consider installing {len(missing_optional)} optional dependencies for enhanced functionality:")
        for package in missing_optional:
            print(f"   - {package}")
    
    return 0 if not missing_required else 1


if __name__ == "__main__":
    sys.exit(main())